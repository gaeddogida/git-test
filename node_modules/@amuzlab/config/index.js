'use strict'

const path = require('path'),
    os = require('os'),
    loader = require('./loader'),

    DEFAULT = Object.create(
        null,
        {
            CONF_PATH: {
                enumerable: true,
                value: path.join(os.homedir(), 'conf')
            },
            MAIN_CONF_NAME: {
                enumerable: true,
                value: 'config'
            },
            IS_GLOBAL: {
                enumerable: true,
                value: false
            },
            GLOBAL_NAME: {
                enumerable: true,
                value: '_APP_CONFIG'
            }
        })

/**
 * @global
 * @since       0.0.1
 * @desc        전달된 설정 파일 또는 디렉터리 내용을 로드한다.
 * @function
 * @author      예장해
 * @param       {Object=}   config                              - 설정 로딩 옵션
 * @param       {String=}   [config.confPath=$HOME/conf/]       - 설정 정보가 있는 파일 또는 디렉터리 경로
 * @param       {String=}   [config.mainConfName=config]        - 메인 설정 파일명
 * @param       {Object=}   config.mapper                       - 설정 파일을 읽을 때마다 등록된 mapper 호출<br/>
 *                                                                호출된 mapper의 리턴값으로 설정 세팅
 * @param       {Boolean=}  [config.isGlobal=false]             - 노드 프로세스 전체에서 글로벌로 사용할 지 여부<br/>
 *                                                                true - config 모듈 세팅 및 글로벌 세팅
 *                                                                false - config 모듈에만 세팅
 * @param       {String=}   [config.globalName=_APP_CONFIG]     - 세팅 값을 글로벌로 사용할 때, process에 세팅되는 프로퍼티명<br/>
 *                                                                ex) data.globalName = '_APP_CONFIG' => process._APP_CONFIG
 * @param       {Boolean}   [config.camelCase=true]             - 설정 파일명으로 속성값 정의할 때, camel casing으로 변환 여부 (v0.0.2)
 * @requires    {@link https://nodejs.org/en/docs/ Node.js 4.x 이상 버전}
 * @requires    {@link https://www.npmjs.com/package/camelcase camelcase}
 * @see         {@link https://www.npmjs.com/package/camelcase camelcase}
*/
module.exports = exports = config => {
    let _config

    config = normalizeConfig(config)

    _config = loader(config)

    Object.assign(
        _config,
        _config[config.mainConfName])

    delete _config[config.mainConfName]

    if (config.isGlobal) {
        process[config.globalName] = _config
    }

    // module init
    module.exports = exports = _config

    return exports
}

function normalizeConfig (config) {
    if (!config) {
        config = {}
    }

    if (typeof config.confPath !== 'string') {
        config.confPath = DEFAULT.CONF_DIR
    }

    if (typeof config.mainConfName !== 'string') {
        config.mainConfName = DEFAULT.MAIN_CONF_NAME
    }

    if (!config.mapper) {
        config.mapper = {}
    }

    if (typeof config.isGlobal !== 'boolean') {
        config.isGlobal = DEFAULT.IS_GLOBAL
    }

    if (typeof config.globalName !== 'string') {
        config.globalName = DEFAULT.GLOBAL_NAME
    }

    if (typeof config.camelCase !== 'boolean') {
        config.camelCase = true
    }

    return config
}
