'use strict'

const path = require('path'),
    fs = require('fs'),
    camelCase = require('camelcase'),

    utils = require('@amuzlab/utils')

/**
 * @module  loader
 * @desc    전달된 설정 파일 또는 디렉터리 내용을 로드한다.
 */

/**
 * @name   loader
 * @function
 * @static
 * @author      예장해
 * @since       0.0.1
 * @param       {Object=}   config                              - 설정 로딩 옵션
 * @param       {String=}   [config.confPath=$HOME/conf/]       - 설정 정보가 있는 파일 또는 디렉터리 경로
 * @param       {String=}   [config.mainConfName=config]        - 메인 설정 파일명
 * @param       {Object=}   config.mapper                       - 설정 파일을 읽을 때마다 등록된 mapper 호출<br/>
 *                                                                호출된 mapper의 리턴값으로 설정 세팅
 * @param       {Boolean=}  [config.isGlobal=false]             - 노드 프로세스 전체에서 글로벌로 사용할 지 여부<br/>
 *                                                                true - config 모듈 세팅 및 글로벌 세팅
 *                                                                false - config 모듈에만 세팅
 * @param       {String=}   [config.globalName=_APP_CONFIG]     - 세팅 값을 글로벌로 사용할 때, process에 세팅되는 프로퍼티명<br/>
 *                                                                ex) data.globalName = '_APP_CONFIG' => process._APP_CONFIG
 * @param       {Boolean}   [config.camelCase=true]             - 설정 파일명으로 속성값 정의할 때, camel casing으로 변환 여부 (v0.0.2)
 * @see         {@link https://www.npmjs.com/package/camelcase camelcase}
*/
module.exports = exports = config => load(config.confPath, config)

/**
 * @name        load
 * @desc        파일 및 디렉터리 내용을 설정값으로 세팅한다.
 * @function
 * @static
 * @private
 * @author      예장해
 * @since       0.0.1
 * @param       {String|Buffer|URL} confPath                    - 설정 파일 및 디렉터리 경로
 * @param       {Object=}   config                              - 설정 로딩 옵션
 * @param       {String=}   [config.confPath=$HOME/conf/]       - 설정 정보가 있는 파일 또는 디렉터리 경로
 * @param       {String=}   [config.mainConfName=config]        - 메인 설정 파일명
 * @param       {Object=}   config.mapper                       - 설정 파일을 읽을 때마다 등록된 mapper 호출<br/>
 *                                                                호출된 mapper의 리턴값으로 설정 세팅
 * @param       {Boolean=}  [config.isGlobal=false]             - 노드 프로세스 전체에서 글로벌로 사용할 지 여부<br/>
 *                                                                true - config 모듈 세팅 및 글로벌 세팅
 *                                                                false - config 모듈에만 세팅
 * @param       {String=}   [config.globalName=_APP_CONFIG]     - 세팅 값을 글로벌로 사용할 때, process에 세팅되는 프로퍼티명<br/>
 *                                                                ex) data.globalName = '_APP_CONFIG' => process._APP_CONFIG
 * @param       {Boolean}   [config.camelCase=true]             - 설정 파일명으로 속성값 정의할 때, camel casing으로 변환 여부 (v0.0.2)
 * @see         {@link https://www.npmjs.com/package/camelcase camelcase}
*/
function load (confPath, config) {
    let stat = fs.statSync(confPath),
        data = null,
        fileName,
        extName,
        mapperName

    if (stat.isDirectory()) {
        fs.readdirSync(confPath)
            .forEach(file => {
                let _data = load(path.join(confPath, file), config),
                    attrName

                if (_data) {
                    if (!data) {
                        data = {}
                    }

                    attrName = path.basename(file, path.extname(file))

                    if (config.camelCase) {
                        attrName = camelCase(attrName)
                    }

                    data[attrName] = _data
                }
            })
    } else {
        if (stat.isFile()) {
            extName = path.extname(confPath)

            if (extName === '.json') {
                fileName = path.basename(confPath, extName)

                data = normalize(JSON.parse(fs.readFileSync(confPath, 'utf8')))

                mapperName = confPath.replace(config.confPath, '').replace(extName, '')
                mapperName = mapperName.replace(/\//g, '.')

                if (mapperName.startsWith('.')) {
                    mapperName = mapperName.substring(1, mapperName.length)
                }

                if (config.mapper && typeof config.mapper[mapperName] === 'function') {
                    data = config.mapper[mapperName](data)
                }
            }
        }
    }

    return data
}

function normalize (data) {
    utils.forEach(
        data,
        (value, key, data) => {
            switch (true) {
                case typeof value === 'object':
                    normalize(value)
                    break
                case typeof value === 'string':
                    /^Infinity$/i.test(value) && (data[key] = Infinity)
                    break
            }
        })

    return data
}
