class ThrottleStream extends require('stream').Transform {
    constructor(config) {
        super(config)
        this.startTime = new Date()
        this.currentTime = 0
        this.readSize = 0
        this.maxCopyBandwidth = config && config.maxCopyBandwidth // bytes
        this.on('pipe', source => (this.path = source.path))
    }

    _transform(chunk, encodig, callback) {
        this.currentTime = new Date()
        this.readSize += chunk.length
        this.push(chunk)
        this.checkTime(callback)
    }
    checkTime(callback) {
        if (this.maxCopyBandwidth) {
            const elapsedTime = this.currentTime - this.startTime  // miliseconds
            const assumedTime = this.readSize / this.maxCopyBandwidth * 1000 // miliseconds
            const lag = assumedTime - elapsedTime
            if (lag > 0) {
                setTimeout(() => {
                    callback()
                }, lag)
            } else {
                callback()
            }
        } else callback()
    }
}

module.exports = exports =ThrottleStream