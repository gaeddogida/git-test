'use strict'

class Watcher {
    constructor (targetPath) {
        Object.defineProperties(
            this,
            {
                _targetPath: {
                    enumerable: true,
                    writable: true,
                    value: targetPath
                },
                _fsWatchers: {
                    writable: true,
                    value: new Map()
                },
                _directories: {
                    value: new Map()
                }
            })
    }

    get targetPath () {
        return this._targetPath
    }

    addFile (file) {
        let directory = this.getDirectory(file.filePath)

        if (directory) {
            return directory.addFile(file)
        } else {
            throw new Error(`failed add file, does not exist directory (filePath : ${file.fullPath})`)
        }
    }

    getFile (filePath, fileName) {
        let directory = this.getDirectory(filePath)

        return directory && directory.getFile(filePath, fileName)
    }

    removeFile (filePath, fileName) {
        let directory = this.getDirectory(filePath)
        return directory && directory.removeFile(filePath, fileName)
    }

    addDirectory (directory) {
        if (this.getDirectory(directory.fullPath)) {
            throw new Error(`already exist directory (direcotry path : ${directory.fullPath})`)
        } else {
            this._directories.set(directory.fullPath, directory)
        }
    }

    getDirectory (dirPath) {
        return this._directories.get(dirPath)
    }

    removeDirectory (dirPath) {
        let directory = this.getDirectory(dirPath)

        return directory && (
            this._directories.delete(dirPath),
            directory.clear(),
            directory)
    }

    addFsWatcher (targetPath, fsWatcher) {
        if (this.getFsWatcher(targetPath)) {
            throw new Error(`already exist fsWatcher (targetPath : ${targetPath})`)
        } else {
            this._fsWatchers.set(targetPath, fsWatcher)
        }
    }

    getFsWatcher (targetPath) {
        return this._fsWatchers.get(targetPath)
    }

    removeFsWatcher (targetPath) {
        let fsWatcher = this.getFsWatcher(targetPath)

        return fsWatcher && (
            fsWatcher.close(),
            fsWatcher)
    }

    close () {
        this._fsWatchers.forEach(fsWatcher => fsWatcher.close())
        this._directories.forEach(directory => directory.clear())
    }
}

module.exports = exports = Watcher
