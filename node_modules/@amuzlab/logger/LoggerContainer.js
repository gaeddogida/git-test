'use strict'

const Logger = require('./Logger'),
    GLOBAL = 'global',
    LEVEL = require('./level')

/**
 * @class       LoggerContainer
 * @classdesc   Logger instance들을 관리하는 class<br/>
 *              <div onclick="this.nextSibling.nextSibling.style.display === 'table' ? (this.nextSibling.nextSibling.style.display = 'none', this.childNodes[0].style.display = 'inline', this.childNodes[1].style.display = 'none') : (this.nextSibling.nextSibling.    style.display = 'table', this.childNodes[0].style.display = 'none', this.childNodes[1].style.display = 'inline')" style="cursor: pointer;"><span>▶</span><span style="display: none;">▼</span>history</div>
 *              <table style="display: none">
 *                  <thead>
 *                      <tr>
 *                          <th style="width: 20%;">Version</th>
 *                          <th>Changes</th>
 *                      </tr>
 *                  </thead>
 *                  <tbody>
 *                      <tr>
 *                          <td>0.0.1</td>
 *                          <td>초기 버전</td>
 *                      </tr>
 *                  </tbody>
 *              </table>
 * @since       1.0.0
*/
class LoggerContainer {
    constructor () {
        Object.defineProperties(
            this,
            {
                /**
                 * @name        _loggers
                 * @memberof    LoggerContainer
                 * @desc        logger instances
                 * @type        {Map<Object,Logger>}
                 * @public
                 * @instance
                 * @readonly
                 * @since       1.0.0
                */
                _loggers: {
                    value: new Map()
                }
            })
    }

    /**
     * @name        get:loggers
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        return logger instances
     * @returns     {Map<Object,Logger>}    logger instances
     * @since       1.0.0
    */
    get loggers () {
        return this._loggers
    }

    /**
     * @name        getLogger
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        return logger instance
     * @param       {Object}    label       logger label
     * @returns     {Logger}    logger instance
     * @since       1.0.0
    */
    getLogger (label) {
        return this.loggers.get(label)
    }

    /**
     * @name        addLogger
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        add logger instance
     * @param       {Object}            config
     * @param       {Object}            config.label
     * @param       {String=}           [config.level=info]                         Log level<br/>
     *                                                                              설정된 level보다 높은 level의 로그는 남지 않음
     * @param       {Boolean=}          [config.timestamp=true]                     Log 메시지 날짜 출력 여부
     * @param       {String=}           [config.timeFormat=YYYY-MM-DD HH:mm:ss]     Log 메시지 날짜 포맷
     * @param       {String=}           [config.transport=console]                  Log 출력 타입 (file, console)
     * @param       {String=}           [config.logDir=$HOME/logs]                  Log 파일 경로
     * @param       {String=}           [config.logFileName=out_%DATE%.log]         Log 파일명
     * @param       {String=}           [config.datePattern=YYYY-MM-DD]             Log 파일명 날짜 포맷
     * @param       {String=}           [config.maxSize=50m]                        Log 파일 최대 사이즈
     * @param       {String|Integer=}   [config.maxFiles=100]                       Log 파일 개수 (날짜 가능 ex : 10d)
     * @param       {Boolean=}          [config.logStack=true]                      Log Stack 출력 여부
     * @returns     {Logger}    added logger instance
     * @since       1.0.0
     * @see         {@link  Logger Logger}
    */
    addLogger (config) {
        let logger

        config.label || (config.label = GLOBAL)

        logger = this.getLogger(config.label)

        logger || (logger = new Logger(config), this.loggers.set(config.label, logger))

        return logger
    }

    /**
     * @name        debug
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        파일에 debug 레벨의 로그 작성<br/>
     *              info이하의 로그 레벨에서는 해당 로그가 남지 않음 
     * @param       {String}    message     Log message format
     * @param       {Iterable=} ...args     Log message data
     * @since       1.0.0
    */
    debug (message, ...args) {
        log.call(this, LEVEL.DEBUG, message, ...args)
    }

    /**
     * @name        info
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        파일에 info 레벨의 로그 작성<br/>
     *              warn이하의 로그 레벨에서는 해당 로그가 남지 않음 
     * @param       {String}    message     Log message format
     * @param       {Iterable=} ...args     Log message data
     * @since       1.0.0
    */
    info (message, ...args) {
        log.call(this, LEVEL.INFO, message, ...args)
    }

    /**
     * @name        warn
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        파일에 warn 레벨의 로그 작성<br/>
     *              error이하의 로그 레벨에서는 해당 로그가 남지 않음 
     * @param       {String}    message     Log message format
     * @param       {Iterable=} ...args     Log message data
     * @since       1.0.0
    */
    warn (message, ...args) {
        log.call(this, LEVEL.WARN, message, ...args)
    }

    /**
     * @name        error
     * @memberof    LoggerContainer
     * @function
     * @instance
     * @public
     * @desc        파일에 error 레벨의 로그 작성
     * @param       {String}    message     Log message format
     * @param       {Iterable=} ...args     Log message data
     * @since       1.0.0
    */
    error (message, ...args) {
        log.call(this, LEVEL.ERROR, message, ...args)
    }
}

/**
 * @name        log
 * @memberof    LoggerContainer
 * @function
 * @static
 * @private
 * @desc        Logger instance를 찾아서 Log 출력
 * @param       {String}    level       log level
 * @param       {String}    message     Log message format
 * @param       {Iterable=} ...args     Log message data
 * @since       1.0.0
*/
function log (level, message, ...args) {
    let logger

    if (typeof message === 'object') {
        logger = this.getLogger(message.label)
        args = message.args
        message = message.message
    } else {
        logger = this.getLogger(GLOBAL)
    }

    logger[level].call(logger, message, ...args)
}

module.exports = exports = new LoggerContainer()
