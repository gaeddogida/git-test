'use strict'

const level = require('./level'),
    Logger = require('./Logger'),
    loggerContainer = require('./LoggerContainer')

/**
 * @global
 * @since       0.0.1
 * @desc             logger 모듈<br/>
 *                   Log 설정을 전달인자로 하여 호출하면 logger 인스턴스가 global로 생성
 * @author      예장해
 * @see         {@link https://www.npmjs.com/package/winston winston}
 * @see         {@link https://www.npmjs.com/package/winston-daily-rotate-file winston-daily-rotate-file}
 * @requires    {@link https://nodejs.org/en/docs/ Node.js 8.x 이상 버전}
 * @requires    {@link https://www.npmjs.com/package/winston winston}
 * @requires    {@link https://www.npmjs.com/package/winston-daily-rotate-file winston-daily-rotate-file}
 * @example
 * const logger = require('@amuzlab/logger')({
 *     level: 'debug',
 *     timestamp: true,
 *     timeFormat: 'YYYY-MM-DD HH:mm:ss',
 *     logDir: '/log',
 *     logFileName: 'out',
 *     datePattern: 'YYYY-MM-DD',
 *     maxSize: '50m',
 *     maxFiles: '10d'
 * })
 *
 * logger.debug('log message')
 * logger.info('log message %s', 'test')
 * logger.warn('log message %s %j', 'test', {a: 10})
 * logger.error('log message %s %j', new Error('error'), {a: 10})
*/
module.exports = exports = config => {
    loggerContainer.addLogger(config)
    return exports
}

Object.defineProperties(
    exports,
    {
        /**
         * @name        LEVEL
         * @since       0.0.1
         * @author      예장해
         * @public
         * @static
         * @readonly
         * @see         {@link module:level level}
         * @type        {module:level}
        */
        LEVEL: {
            enumerable: true,
            value: level
        },
        /**
         * @name        Logger
         * @since       0.0.1
         * @author      예장해
         * @public
         * @static
         * @readonly
         * @see         {@link logger~Logger Logger}
         * @type        {logger~Logger}
        */
        Logger: {
            enumerable: true,
            value: Logger
        },
        addLogger: {
            enumerable: true,
            value: loggerContainer.addLogger.bind(loggerContainer)
        },
        getLogger: {
            enumerable: true,
            value: loggerContainer.getLogger.bind(loggerContainer)
        },
        debug: {
            enumerable: true,
            value: loggerContainer.debug.bind(loggerContainer)
        },
        info: {
            enumerable: true,
            value: loggerContainer.info.bind(loggerContainer)
        },
        warn: {
            enumerable: true,
            value: loggerContainer.warn.bind(loggerContainer)
        },
        error: {
            enumerable: true,
            value: loggerContainer.error.bind(loggerContainer)
        }
    })
