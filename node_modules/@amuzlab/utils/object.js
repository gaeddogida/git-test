'use strict'

/**
 * @module      object
 * @desc        object와 관련된 util 모듈
 * @since       0.0.1
*/

const util = require('./util')

Object.defineProperties(
    exports,
    {
        filter: {
            enumerable: true,
            value: (obj, filter, mapper, thisArg) => {
                arguments.length === 3 ? ((mapper && typeof mapper === 'object') ? (thisArg = mapper) : null) : null
                const isMapperFn = typeof mapper === 'function'

                return typeof filter === 'function' ? util.reduce(
                    obj,
                    (_obj, v, k, obj) => (
                        filter.call(thisArg, v, k, obj) ? (_obj[k] = isMapperFn ? mapper.call(thisArg, v, k, obj) : v) : null,
                        _obj), {}) : {}
            }
        },
        isEmptyObject: {
            enumerable: true,
            value: obj => (obj && typeof obj == 'object') ? Object.keys(obj).length === 0 : false
        },
        createDescriptor: {
            enumerable: true,
            value: (value, descriptor) => {
                value && typeof value === 'object' && ((value.hasOwnProperty('get') && typeof value.get === 'function') || (value.hasOwnProperty('set') && typeof value.set === 'function')) ? (descriptor = value, value = null) : null

                return Object.assign(
                    {},
                    descriptor,
                    (value !== null && value !== undefined) ? { value: value } : {})
            }
        },
        curriedCreateDescriptor: {
            enumerable: true,
            value: descriptor => util.curryR(exports.createDescriptor, descriptor)
        },
        createDescriptors: {
            enumerable: true,
            value: (values, descriptor) => {
                let _descriptors = {},
                    _curriedCreateDescriptor

                return arguments.length >= 1 && (Array.isArray(values) || typeof values === 'object') ? (
                    _curriedCreateDescriptor = exports.curriedCreateDescriptor(descriptor),
                    util.forEach(
                        values,
                        (v, k) => (Array.isArray(values) ? (k = v[0], v = v[1]) : null, _descriptors[k] = _curriedCreateDescriptor(v))),
                    _descriptors) : _descriptors
            }
        },
        defineProperties: {
            enumerable: true,
            value: (target, values, descriptor) => (arguments.length >= 2 && target && (typeof target === 'object' || typeof target === 'function')) ? (Object.defineProperties(target, exports.createDescriptors(values, descriptor)), target) : target
        },
        setValue: {
            enumerable: true,
            value: (obj, key, value, options) => {
                options || (options = {})

                switch (true) {
                    case obj && typeof obj === 'object' && /(string|number)/i.test(typeof key):
                        setValue(obj, key, value)
                        break
                    case /string|number/i.test(typeof obj):
                        return util.curryR(exports.setValue, obj, key, value)
                        break
                }

                function setValue (obj, key, value) {
                    let temp = key.split('.')

                    util.reduce(
                        temp,
                        (obj, attr, index) => {
                            if (index === temp.length - 1) {
                                obj[attr] = value
                            } else {
                                if (obj[attr] === null || obj[attr] === undefined) {
                                    obj[attr] = {}
                                    obj = obj[attr]
                                } else {
                                    if (typeof obj[attr] === 'object') {
                                        obj = obj[attr]
                                    } else {
                                        if (options.force) {
                                            obj[attr] = {}
                                            obj = obj[attr]
                                        } else {
                                            throw new Error(`failed set value (${temp.slice(0, index + 1).join('.')} is ${typeof obj[attr]} type)`)
                                        }
                                    }
                                }
                            }

                            return obj
                        },
                        obj)

                    return obj
                }

                return obj
            }
        },
        getValue: {
            enumerable: true,
            value: (obj, key, mapper) => {
                let value

                switch (true) {
                    case obj && typeof obj === 'object' && /(string|number)/i.test(typeof key):
                        value = getValue(obj, key, mapper)
                        break
                    case /string|number/i.test(typeof obj):
                        value = util.curryR(exports.getValue, obj, key, mapper)
                        break
                }

                function getValue (obj, key, mapper) {
                    let temp = key.split('.')

                    return util.go(
                        temp,
                        util.reduce(
                            (value, attr, index) => value[attr],
                            obj),
                        value => typeof mapper === 'function' ? mapper(value) : value)
                }

                return value
            }
        },
        isExistProperties: {
            enumerable: true,
            value: (obj, properties) => {
                let result = []

                util.forEach(
                    obj,
                    (v, k) => properties.some(property => property.name === k) ? result.push(k) : null)

                return result
            }
        }
    })
