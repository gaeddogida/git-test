'use strict'

const util = require('./util')

Object.defineProperties(
    exports,
    {
        split: {
            enumerable: true,
            value: function (obj, separator, limit) {
                return obj instanceof RegExp ? util.curryR(exports.split, separator, limit) : ((arguments.length >= 2 && typeof obj === 'string') ? obj.split(separator, limit) : [])
            }
        },
        padStart: {
            enumerable: true,
            value: function (str, targetLength, padString) {
                let result = str

                result = typeof result === 'string' ? result : String(result)
                padString = typeof padString === 'string' ? padString : String(padString)
                targetLength = targetLength >> 0
                padString = String(padString || ' ')

                return result.length > targetLength ? String(result) : (
                    targetLength = targetLength - result.length,
                    targetLength > padString.length ? (padString += padString.repeat(targetLength / padString.length)) : null,
                    padString.slice(0,targetLength) + String(result))
            }
        },
        replaceAt: {
            enumerable: true,
            value: function (str, index, targetStr){
                let _temp

                return typeof str === 'string' && typeof index === 'number' && typeof targetStr === 'string' ? str = str.replace((_temp = str.substr(index), _temp), '') + targetStr + _temp : str
            }
        },
        /**
         * @name        matchAll
         * @function
         * @static
         * @public
         * @desc        str parameter로 전달된 문자열에 대해 pattern에 맞는 match 결과 리턴
         * @param       {String}                str         match할 문자열<br/>
         *                                                  RegExp 타입이 전달되면 curred function return
         * @param       {String|RegExp}         pattern     match pattern<br/>
         *                                                  String 타입의 경우 RegExp로 변환 후 match 실행
         * @return      {Array<Object>}                     match 결과 리턴
         * @since       1.1.3
        */
        matchAll: {
            enumerable: true,
            value: function (str, pattern) {
                let matches,
                    temp,
                    flags,
                    regex

                if (str instanceof RegExp) {
                    pattern = str
                    matches = util.curryR(exports.matchAll, pattern)
                } else {
                    pattern instanceof RegExp ? (
                        flags = /g/.test(pattern.flags) ? pattern.flags : `${pattern.flags}g`,
                        regex = new RegExp(pattern.source, flags)) : (regex = new RegExp(pattern.toString(), 'g'))

                    if (typeof String.prototype.matchAll === 'function') {
                        matches = [...str.matchAll(regex)]
                    } else {
                        matches = []
                        temp = str.match(pattern)

                        while ((temp = regex.exec(str)) !== null) {
                            matches.push(temp)
                        }
                    }
                }

                return matches
            }
        }
    })
