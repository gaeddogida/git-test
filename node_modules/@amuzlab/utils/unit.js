'use strict'

const util = require('./util'),
    validation = require('./validation')

/**
 * @module      unit
 * @desc        단위 관련 util 모듈
 * @since       1.2.6
*/

Object.defineProperties(
    exports,
    {
        /**
         * @name        convertVolume
         * @desc        용량 단위 변경
         * @function
         * @static
         * @public
         * @param       {Number|String}     volume                                      변환할 값
         * @param       {Object=}           options                                     변환 옵션
         * @param       {String=}           [options.unit=B]                            변환 단위
         * @param       {String=}           [options.convertUnit=B]                     변환 단위
         * @param       {String|Integer=}   [options.prefix=2]                          사이즈 단위
         *                                                                              <ul>
         *                                                                                <li>10</li>
         *                                                                                <li>2</li>
         *                                                                              <ul/>
         * @param       {String|Integer=}   [options.convertPrefix=options.prefix]      사이즈 단위
         *                                                                              <ul>
         *                                                                                <li>10</li>
         *                                                                                <li>2</li>
         *                                                                              <ul/>
         * @param       {Integer=}          [options.postfix=3]                         소수점 단위
         * @returns     {Number}    converted volume
         * @throws      {Error}     Not supported volume type
        */
        convertVolume: {
            enumerable: true,
            value: (volume, options) => {
                let temp

                options || (options = {})

                switch (typeof volume) {
                    case 'string':
                        temp = volume.match(/^(\d+([.]\d*)?|[.]\d+)[yzeptgmkb]*$/i)

                        if (temp) {
                            volume = parseFloat(temp[0])
                            options.unit || (temp = temp[0].replace(volume, '')) && (options.unit = temp)
                        } else {
                            throw new Error(`Not supported volume format (volume : ${volume})`)
                        }

                        break
                    case 'number':
                        break
                    default:
                        throw new Error(`Not supported volume type (type : ${typeof volume}, volume : ${volume})`)
                }

                typeof options.unit === 'string' || (options.unit = 'B')
                typeof options.convertUnit === 'string' || (options.convertUnit = 'B')
                validation.isPositiveInt(options.postfix) || (options.postfix = 3)

                options.prefix = /^(10|2)$/i.test(options.prefix) ? parseInt(options.prefix) : 2
                options.convertPrefix = /^(10|2)$/i.test(options.convertPrefix) ? parseInt(options.convertPrefix) : options.prefix

                volume = convertVolume(parseFloat(volume), options.unit, options.prefix, (volume, v) => volume * v)
                volume = convertVolume(volume, options.convertUnit, options.convertPrefix, (volume, v) => volume / v)

                options.postfix >= 0 && (volume = Math.round(volume * Math.pow(10, options.postfix)) / Math.pow(10, options.postfix))

                return volume
            }
        }
    })

function convertVolume (volume, unit, prefix, callback) {
    util.forEach(
        unit,
        s => {
            switch (s) {
                case 'Y':
                case 'y':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 80 : 24))
                    break
                case 'Z':
                case 'z':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 70 : 21))
                    break
                case 'E':
                case 'e':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 60 : 18))
                    break
                case 'P':
                case 'p':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 50 : 15))
                    break
                case 'T':
                case 't':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 40 : 12))
                    break
                case 'G':
                case 'g':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 30 : 9))
                    break
                case 'M':
                case 'm':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 20 : 6))
                    break
                case 'K':
                case 'k':
                    volume = callback(volume, Math.pow(prefix, prefix === 2 ? 10 : 3))
                    break
                case 'B':
                    volume = callback(volume, 8)
                    break
            }
        })

    return volume
}
