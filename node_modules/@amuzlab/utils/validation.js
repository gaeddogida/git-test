'use strict'

const INT = /^[-+]?\d+(.0{1,})*$/,
    P_INT = /^[+]?\d+(.0{1,})*$/,
    N_INT = /^[-]{1,1}\d+(.0{1,})*$/,
    FLOAT = /^[-+]?(\d*[.])?\d+$/,
    P_FLOAT = /^[+]?(\d+([.]\d*)?|[.]\d+)$/,
    N_FLOAT = /^[-]{1,1}(\d+([.]\d*)?|[.]\d+)$/

Object.defineProperties(
    exports,
    {
        isNumber: {
            enumerable: true,
            value: target => !isNaN(target) && typeof target === 'number'
        },
        isInt: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = INT.test(target)
                return result && isStrict ? Number.isInteger(target) : result
            }
        },
        isPositiveInt: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = P_INT.test(target)
                return result && isStrict ? Number.isInteger(target) && target >= 0 : result
            }
        },
        isNagativeInt: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = N_INT.test(target)
                return result && isStrict ? Number.isInteger(target) && target < 0 : result
            }
        },
        isFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = FLOAT.test(target)
                return result && isStrict ? typeof target === 'number' : result
            }
        },
        isPositiveFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = P_FLOAT.test(target)
                return result && isStrict ? typeof target === 'number' : result
            }
        },
        isNagativeFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = N_FLOAT.test(target)
                return result && isStrict ? result = typeof target === 'number' : result
            }
        },
        isString: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = typeof target === 'string'
                return result && isStrict ? target !== '' : result
            }
        },
        isFunction: {
            enumerable: true,
            value: target => typeof target === 'function'
        },
        isObject: {
            enumerable: true,
            value: target => target && typeof target === 'object'
        },
        isArray: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = exports.isObject(target, true) && target.hasOwnProperty('length')
                return result && isStrict ? Array.isArray(target) : result
            }
        },
        isTrue: {
            enumerable: true,
            value: target => {
                let result = false

                switch (typeof target) {
                    case 'boolean':
                        result = target
                        break
                    case 'string':
                        result = /^(y|true|yes)$/i.test(target)
                        break
                    case 'number':
                        result = target !== 0
                        break
                }

                return result
            }
        }
    })
